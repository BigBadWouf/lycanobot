Index: admin.pl
===================================================================
--- admin.pl	(revision 290)
+++ admin.pl	(working copy)
@@ -68,6 +68,34 @@
     return grep(/^\Q$_[0]\E$/, @{$CFG{'ignore'}});
 }
 
+sub yates_fisher_shuffle {
+    my $cards = shift;
+    my $i = @$cards;
+    my $j;
+    while(--$i) {
+	$j = int rand($i+1);
+	next if $i == $j;
+	@$cards[$i,$j] = @$cards[$j,$i];
+    }
+}
+
+sub random_org_suffle {
+    my $cards = shift;
+    my $poststr = join("%0D%0A", @$cards);
+
+    # -s: silent mode, -m 6: max 6 sec hanging
+    my @randcards = split(/\n/, `curl -m 6 -s -d "rnd=new&format=plain&list=$poststr" https://www.random.org/lists/`);
+
+    if (join('', sort @randcards) eq join('', sort @$cards)) {
+	@$cards = @randcards;
+	print "-> Cards shuffled using random.org\n";
+	return 1;
+    } else {
+        print "-> Error while randomizing cards with random.org, using yates-fisher instead.\n";
+	return 0;
+    }
+}
+
 # This sub initialize a new game distributing jobs
 # to every player (so %players is reseted)
 # $1 = number of werewolves
@@ -75,7 +103,6 @@
     my $num_werewolves = shift;
     my @cards; # cards to distribute
     my $rand;
-    my ($i,$j);
     my $num_players = keys(%players);
     my $min_ply;
 
@@ -120,14 +147,8 @@
     }
 
     # mix up the cards :)
-    # this shuffle @cards
-    foreach (1 .. 5) {
-	$i = @cards;
-	while(--$i) {
-	    $j = int rand($i+1);
-	    next if $i == $j;
-	    @cards[$i,$j] = @cards[$j,$i];
-	}
+    unless(random_org_suffle(\@cards)) {
+	yates_fisher_shuffle(\@cards);
     }
 
     # Initialize all players, assinging each job
